"""
Script de teste para verificar componentes do JUNIM
"""

import sys
import os

# Adiciona path do projeto
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("üîç Testando imports dos m√≥dulos...")
    
    try:
        from ui.interface import JUNIMInterface
        print("‚úÖ Interface UI importada com sucesso")
        
        from core.pipeline import ModernizationPipeline
        print("‚úÖ Pipeline importado com sucesso")
        
        from core.delphi_parser import DelphiParser
        print("‚úÖ Parser Delphi importado com sucesso")
        
        from core.rag_builder import RAGBuilder
        print("‚úÖ RAG Builder importado com sucesso")
        
        from core.llm_service import LLMService
        print("‚úÖ LLM Service importado com sucesso")
        
        from core.java_builder import JavaBuilder
        print("‚úÖ Java Builder importado com sucesso")
        
        from utils.file_handler import FileHandler
        print("‚úÖ File Handler importado com sucesso")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar: {e}")
        return False

def test_dependencies():
    """Testa depend√™ncias externas"""
    print("\nüì¶ Testando depend√™ncias externas...")
    
    try:
        import streamlit
        print("‚úÖ Streamlit dispon√≠vel")
    except ImportError:
        print("‚ùå Streamlit n√£o encontrado")
    
    try:
        import groq
        print("‚úÖ Groq dispon√≠vel")
    except ImportError:
        print("‚ö†Ô∏è Groq n√£o encontrado (opcional)")
    
    try:
        import ollama
        print("‚úÖ Ollama dispon√≠vel")
    except ImportError:
        print("‚ö†Ô∏è Ollama n√£o encontrado (opcional)")
    
    try:
        import requests
        print("‚úÖ Requests dispon√≠vel")
    except ImportError:
        print("‚ùå Requests n√£o encontrado")

def test_knowledge_base():
    """Testa se a base de conhecimento est√° acess√≠vel"""
    print("\nüìö Testando base de conhecimento...")
    
    try:
        from core.rag_builder import RAGBuilder
        rag = RAGBuilder()
        summary = rag.get_knowledge_base_summary()
        
        if summary['status'] == 'loaded':
            print(f"‚úÖ Base de conhecimento carregada: {summary['total_sections']} se√ß√µes")
            return True
        else:
            print("‚ö†Ô∏è Base de conhecimento vazia")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na base de conhecimento: {e}")
        return False

def test_file_structure():
    """Testa estrutura de arquivos"""
    print("\nüìÅ Testando estrutura de arquivos...")
    
    required_files = [
        'main.py',
        'requirements.txt',
        'ui/interface.py',
        'core/pipeline.py',
        'core/delphi_parser.py',
        'core/rag_builder.py',
        'core/llm_service.py',
        'core/java_builder.py',
        'utils/file_handler.py',
        'knowledge_base/delphi_to_spring_mappings.md'
    ]
    
    all_found = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} n√£o encontrado")
            all_found = False
    
    return all_found

def test_basic_functionality():
    """Testa funcionalidade b√°sica"""
    print("\n‚öôÔ∏è Testando funcionalidade b√°sica...")
    
    try:
        # Testa FileHandler
        from utils.file_handler import FileHandler
        fh = FileHandler()
        print("‚úÖ FileHandler inicializado")
        
        # Testa DelphiParser
        from core.delphi_parser import DelphiParser
        dp = DelphiParser()
        print("‚úÖ DelphiParser inicializado")
        
        # Testa RAGBuilder
        from core.rag_builder import RAGBuilder
        rb = RAGBuilder()
        print("‚úÖ RAGBuilder inicializado")
        
        # Testa JavaBuilder
        from core.java_builder import JavaBuilder
        jb = JavaBuilder()
        print("‚úÖ JavaBuilder inicializado")
        
        # Testa configura√ß√£o do LLMService
        from core.llm_service import LLMService
        config = {
            'groq_api_key': '',
            'groq_model': 'llama3-70b-8192',
            'ollama_url': 'http://localhost:11434',
            'ollama_model': 'codellama:34b'
        }
        llm = LLMService(config)
        print("‚úÖ LLMService inicializado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na funcionalidade b√°sica: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ JUNIM - Teste de Componentes\n")
    
    tests = [
        ("Imports", test_imports),
        ("Depend√™ncias", test_dependencies),
        ("Base de Conhecimento", test_knowledge_base),
        ("Estrutura de Arquivos", test_file_structure),
        ("Funcionalidade B√°sica", test_basic_functionality)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"Executando: {test_name}")
        print('='*50)
        
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro durante teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo final
    print(f"\n{'='*50}")
    print("RESUMO DOS TESTES")
    print('='*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ Todos os testes passaram! JUNIM est√° pronto para uso.")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total - passed} teste(s) falharam. Verifique as depend√™ncias.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    
    print("\n" + "="*50)
    print("Para executar o JUNIM:")
    print("  Windows: run_junim.bat")
    print("  Linux/Mac: ./run_junim.sh")
    print("  Manual: streamlit run main.py")
    print("="*50)
    
    sys.exit(exit_code)
