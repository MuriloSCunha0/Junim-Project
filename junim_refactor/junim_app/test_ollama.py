#!/usr/bin/env python3
"""
Script para testar a conex√£o com o Ollama
"""

import sys
import os
import requests
import json

# Adiciona o diret√≥rio pai ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_ollama_connection():
    """Testa a conex√£o com o Ollama"""
    print("üîç Testando conex√£o com Ollama...")
    
    try:
        # Testa se o servidor est√° rodando
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ Servidor Ollama est√° rodando!")
            
            # Lista modelos dispon√≠veis
            data = response.json()
            models = data.get('models', [])
            
            print(f"\nüìã Modelos dispon√≠veis ({len(models)}):")
            for model in models:
                name = model.get('name', 'Unknown')
                size = model.get('size', 0)
                size_mb = size / (1024*1024) if size > 0 else 0
                print(f"  ‚Ä¢ {name} ({size_mb:.1f} MB)")
            
            # Verifica se o deepseek-r1:1.5b est√° dispon√≠vel
            model_names = [m['name'] for m in models]
            if 'deepseek-r1:1.5b' in model_names:
                print("\n‚úÖ deepseek-r1:1.5b est√° dispon√≠vel!")
                return True
            else:
                print("\n‚ö†Ô∏è  deepseek-r1:1.5b n√£o encontrado!")
                print("üí° Para instalar: ollama pull deepseek-r1:1.5b")
                return False
                
        else:
            print(f"‚ùå Erro ao conectar com Ollama: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Ollama n√£o est√° rodando ou n√£o est√° acess√≠vel")
        print("üí° Verifique se o Ollama est√° instalado e rodando: ollama serve")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {str(e)}")
        return False

def test_ollama_generation():
    """Testa a gera√ß√£o de c√≥digo com Ollama"""
    print("\nüß™ Testando gera√ß√£o de c√≥digo...")
    
    try:
        import ollama
        
        # Prompt simples de teste
        test_prompt = """
        Converta este c√≥digo Delphi simples para Java Spring Boot:
        
        procedure TForm1.Button1Click(Sender: TObject);
        begin
          ShowMessage('Hello World');
        end;
        
        Retorne JSON no formato: {"files": [{"name": "arquivo.java", "content": "c√≥digo"}]}
        """
        
        response = ollama.chat(
            model='deepseek-r1:1.5b',
            messages=[
                {
                    'role': 'system',
                    'content': 'Voc√™ √© um especialista em migra√ß√£o de sistemas Delphi para Java Spring Boot. Retorne c√≥digo Java funcional no formato JSON.'
                },
                {
                    'role': 'user',
                    'content': test_prompt
                }
            ],
            options={
                'temperature': 0.1,
                'num_predict': 200
            }
        )
        
        print("‚úÖ Resposta gerada com sucesso!")
        print(f"üìÑ Conte√∫do: {response['message']['content'][:200]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar c√≥digo: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ JUNIM - Teste de Integra√ß√£o com Ollama")
    print("=" * 50)
    
    # Testa conex√£o
    connection_ok = test_ollama_connection()
    
    # Testa gera√ß√£o se a conex√£o estiver OK
    if connection_ok:
        test_ollama_generation()
    
    print("\n" + "=" * 50)
    print("üèÅ Teste conclu√≠do!")
