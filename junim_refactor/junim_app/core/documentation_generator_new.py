"""
Gerador de documenta√ß√£o t√©cnica completa para projetos Delphi
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional
from pathlib import Path
from datetime import datetime

logger = logging.getLogger(__name__)

class DocumentationGenerator:
    """Gerador de documenta√ß√£o t√©cnica abrangente"""
    
    def __init__(self, llm_service=None, prompt_manager=None):
        self.llm_service = llm_service
        self.prompt_manager = prompt_manager
        self.docs_dir = Path("generated_docs")
        self.docs_dir.mkdir(exist_ok=True)
        
        # Tipos de documentos que ser√£o gerados
        self.document_types = {
            'backend_analysis': {
                'name': 'üîß An√°lise de Backend',
                'prompt_type': 'analysis',
                'filename': 'backend_analysis.md'
            },
            'functionality_mapping': {
                'name': 'üîó Mapeamento de Funcionalidades',
                'prompt_type': 'functionality_mapping',
                'filename': 'functionality_mapping.md'
            },
            'requirements_analysis': {
                'name': 'üìã An√°lise de Requisitos',
                'prompt_type': 'requirements',
                'filename': 'requirements_analysis.md'
            },
            'system_characteristics': {
                'name': '‚öôÔ∏è Caracter√≠sticas do Sistema',
                'prompt_type': 'characteristics',
                'filename': 'system_characteristics.md'
            },
            'execution_flows': {
                'name': 'üîÑ Fluxos de Execu√ß√£o',
                'prompt_type': 'execution_flows',
                'filename': 'execution_flows.md'
            },
            'data_flows': {
                'name': 'üìä Fluxos de Dados',
                'prompt_type': 'data_flows',
                'filename': 'data_flows.md'
            },
            'correlations': {
                'name': 'üîó Correla√ß√µes Delphi‚ÜíJava',
                'prompt_type': 'correlations',
                'filename': 'correlations.md'
            },
            'quality_metrics': {
                'name': 'üìà M√©tricas de Qualidade',
                'prompt_type': 'quality_metrics',
                'filename': 'quality_metrics.md'
            },
            'testing_strategy': {
                'name': 'üß™ Estrat√©gia de Testes',
                'prompt_type': 'testing',
                'filename': 'testing_strategy.md'
            }
        }
    
    def generate_complete_documentation(self, analysis_results: Dict[str, Any], 
                                      project_name: str = "Projeto") -> Dict[str, str]:
        """
        Gera documenta√ß√£o completa do projeto baseada na an√°lise
        
        Args:
            analysis_results: Resultados da an√°lise do projeto
            project_name: Nome do projeto
            
        Returns:
            Dict com caminhos dos documentos gerados
        """
        try:
            logger.info(f"üöÄ Iniciando gera√ß√£o de documenta√ß√£o completa para: {project_name}")
            
            # Cria diret√≥rio espec√≠fico para o projeto
            project_dir = self.docs_dir / self._sanitize_filename(project_name)
            project_dir.mkdir(exist_ok=True)
            
            generated_docs = {}
            
            # Gera cada tipo de documento
            for doc_key, doc_config in self.document_types.items():
                try:
                    logger.info(f"üìÑ Gerando documento: {doc_config['name']}")
                    
                    doc_path = self._generate_document(
                        doc_key=doc_key,
                        doc_config=doc_config,
                        analysis_results=analysis_results,
                        project_dir=project_dir,
                        project_name=project_name
                    )
                    
                    if doc_path:
                        generated_docs[doc_key] = str(doc_path)
                        logger.info(f"‚úÖ Documento gerado: {doc_config['name']}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Falha ao gerar documento: {doc_config['name']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erro ao gerar documento {doc_key}: {str(e)}")
                    continue
            
            # Gera √≠ndice da documenta√ß√£o
            self._generate_documentation_index(generated_docs, project_dir, project_name)
            
            # Salva metadados
            self._save_documentation_metadata(generated_docs, analysis_results, project_dir)
            
            logger.info(f"üéâ Documenta√ß√£o completa gerada: {len(generated_docs)} documentos")
            return generated_docs
            
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o de documenta√ß√£o: {str(e)}")
            return {}
    
    def _generate_document(self, doc_key: str, doc_config: Dict[str, Any], 
                          analysis_results: Dict[str, Any], project_dir: Path, 
                          project_name: str) -> Optional[Path]:
        """Gera um documento espec√≠fico"""
        try:
            # Obt√©m prompt espec√≠fico
            prompt = self._get_prompt_for_document(doc_config['prompt_type'])
            
            # Prepara contexto
            context = self._prepare_context(analysis_results, project_name, doc_key)
            
            # Gera conte√∫do
            content = self._generate_content(prompt, context)
            
            if not content:
                return None
            
            # Salva documento
            doc_path = project_dir / doc_config['filename']
            with open(doc_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
            return doc_path
            
        except Exception as e:
            logger.error(f"Erro ao gerar documento {doc_key}: {str(e)}")
            return None
    
    def _get_prompt_for_document(self, prompt_type: str) -> str:
        """Obt√©m prompt espec√≠fico para tipo de documento"""
        if not self.prompt_manager:
            return self._get_fallback_prompt(prompt_type)
        
        try:
            # Mapeia tipos de prompt para m√©todos do PromptManager
            prompt_methods = {
                'analysis': 'get_backend_analysis_prompt',
                'functionality_mapping': 'get_functionality_mapping_prompt',
                'requirements': 'get_requirements_analysis_prompt',
                'characteristics': 'get_system_characteristics_prompt',
                'execution_flows': 'get_execution_flows_prompt',
                'data_flows': 'get_data_flows_prompt',
                'correlations': 'get_correlations_prompt',
                'quality_metrics': 'get_quality_metrics_prompt',
                'testing': 'get_testing_prompt'
            }
            
            method_name = prompt_methods.get(prompt_type)
            if method_name and hasattr(self.prompt_manager, method_name):
                method = getattr(self.prompt_manager, method_name)
                return method()
            else:
                return self._get_fallback_prompt(prompt_type)
                
        except Exception as e:
            logger.warning(f"Erro ao obter prompt especializado: {str(e)}")
            return self._get_fallback_prompt(prompt_type)
    
    def _get_fallback_prompt(self, prompt_type: str) -> str:
        """Prompts de fallback para cada tipo de documento"""
        prompts = {
            'analysis': """
Analise o projeto Delphi fornecido e gere uma documenta√ß√£o t√©cnica detalhada focada no backend.

Considere:
- Estrutura do projeto
- Funcionalidades principais
- L√≥gica de neg√≥cio
- Integra√ß√£o com banco de dados
- Arquitetura geral

Forne√ßa insights t√©cnicos precisos para moderniza√ß√£o para Java Spring Boot.
            """,
            'functionality_mapping': """
Mapeie todas as funcionalidades do sistema Delphi fornecido.

Para cada funcionalidade identifique:
- Nome e prop√≥sito
- Entrada e sa√≠da de dados
- Regras de neg√≥cio
- Depend√™ncias
- Equivalente em Java Spring Boot

Foque em funcionalidades de backend.
            """,
            'requirements': """
Extraia e documente todos os requisitos do sistema baseado no c√≥digo Delphi.

Inclua:
- Requisitos funcionais
- Requisitos n√£o funcionais
- Regras de neg√≥cio
- Integra√ß√µes necess√°rias
- Valida√ß√µes e constraints
            """,
            'characteristics': """
Analise as caracter√≠sticas t√©cnicas do sistema Delphi.

Documente:
- Arquitetura atual
- Padr√µes utilizados
- Complexidade t√©cnica
- Pontos fortes e fracos
- M√©tricas de qualidade
            """,
            'execution_flows': """
Documente os fluxos de execu√ß√£o do sistema.

Inclua:
- Fluxo de inicializa√ß√£o
- Fluxos de trabalho principais
- Tratamento de erros
- Sequ√™ncias de finaliza√ß√£o
            """,
            'data_flows': """
Mapeie todos os fluxos de dados do sistema.

Documente:
- Fluxos de banco de dados
- Fluxos entre m√≥dulos
- Fluxos de entrada/sa√≠da
- Transforma√ß√µes de dados
            """,
            'correlations': """
Gere correla√ß√µes entre componentes Delphi e equivalentes Java Spring Boot.

Mapeie:
- Classes Delphi ‚Üí Classes Java
- Formul√°rios ‚Üí Controllers REST
- M√≥dulos ‚Üí Services
- Acesso a dados ‚Üí Repositories
            """,
            'quality_metrics': """
Avalie m√©tricas de qualidade do c√≥digo Delphi.

Analise:
- Complexidade ciclom√°tica
- Cobertura de testes
- Manutenibilidade
- Padr√µes de c√≥digo
- D√≠vida t√©cnica
            """,
            'testing': """
Desenvolva estrat√©gia de testes para o sistema modernizado.

Inclua:
- Testes unit√°rios
- Testes de integra√ß√£o
- Testes de API
- Cen√°rios de teste
- Cobertura esperada
            """
        }
        
        return prompts.get(prompt_type, "Analise o projeto fornecido e gere documenta√ß√£o t√©cnica detalhada.")
    
    def _prepare_context(self, analysis_results: Dict[str, Any], project_name: str, doc_key: str) -> str:
        """Prepara contexto para gera√ß√£o de documento"""
        context = f"""
PROJETO: {project_name}
DOCUMENTO: {doc_key}

AN√ÅLISE DO PROJETO:
{json.dumps(analysis_results, indent=2, ensure_ascii=False)}

INSTRU√á√ïES:
- Gere documenta√ß√£o t√©cnica detalhada e espec√≠fica
- Foque em aspectos de backend
- Use markdown para formata√ß√£o
- Seja preciso e objetivo
- Inclua exemplos quando necess√°rio
        """
        return context
    
    def _generate_content(self, prompt: str, context: str) -> str:
        """Gera conte√∫do usando LLM ou fallback"""
        if self.llm_service:
            try:
                full_prompt = f"{prompt}\n\n{context}"
                content = self.llm_service.generate_response(full_prompt)
                return content if content else self._generate_fallback_content(context)
            except Exception as e:
                logger.warning(f"Erro ao gerar conte√∫do com LLM: {str(e)}")
                return self._generate_fallback_content(context)
        else:
            return self._generate_fallback_content(context)
    
    def _generate_fallback_content(self, context: str) -> str:
        """Gera conte√∫do de fallback quando LLM n√£o est√° dispon√≠vel"""
        return f"""
# Documenta√ß√£o T√©cnica

## Contexto
{context}

## An√°lise
Esta documenta√ß√£o foi gerada automaticamente baseada na an√°lise do projeto.

## Pr√≥ximos Passos
- Revisar e ajustar documenta√ß√£o
- Validar informa√ß√µes t√©cnicas
- Complementar com detalhes espec√≠ficos

*Nota: Este documento foi gerado automaticamente e deve ser revisado.*
        """
    
    def _generate_documentation_index(self, generated_docs: Dict[str, str], 
                                    project_dir: Path, project_name: str):
        """Gera √≠ndice da documenta√ß√£o"""
        try:
            index_content = f"""# Documenta√ß√£o T√©cnica - {project_name}

## √çndice de Documentos

"""
            
            for doc_key, doc_path in generated_docs.items():
                doc_config = self.document_types.get(doc_key, {})
                doc_name = doc_config.get('name', doc_key)
                filename = Path(doc_path).name
                
                index_content += f"- [{doc_name}](./{filename})\n"
            
            index_content += f"""

## Informa√ß√µes de Gera√ß√£o

- **Data**: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
- **Documentos**: {len(generated_docs)}
- **Projeto**: {project_name}

## Como Usar

1. Comece pelo **Resumo Executivo** para vis√£o geral
2. Consulte **An√°lise de Backend** para detalhes t√©cnicos
3. Use **Mapeamento de Funcionalidades** para entender recursos
4. Revise **Fluxos** para compreender opera√ß√µes
5. Consulte **Correla√ß√µes** para moderniza√ß√£o

---
*Documenta√ß√£o gerada automaticamente pelo JUNIM*
"""
            
            index_path = project_dir / "README.md"
            with open(index_path, 'w', encoding='utf-8') as f:
                f.write(index_content)
                
            logger.info("‚úÖ √çndice da documenta√ß√£o gerado")
            
        except Exception as e:
            logger.error(f"Erro ao gerar √≠ndice: {str(e)}")
    
    def _save_documentation_metadata(self, generated_docs: Dict[str, str], 
                                   analysis_results: Dict[str, Any], project_dir: Path):
        """Salva metadados da documenta√ß√£o"""
        try:
            metadata = {
                'generation_date': datetime.now().isoformat(),
                'documents_generated': len(generated_docs),
                'document_list': list(generated_docs.keys()),
                'analysis_summary': {
                    'total_files': analysis_results.get('project_info', {}).get('total_files', 0),
                    'main_units': len(analysis_results.get('units_analysis', {})),
                    'has_requirements': 'requirements' in analysis_results,
                    'has_characteristics': 'characteristics' in analysis_results
                }
            }
            
            metadata_path = project_dir / "metadata.json"
            with open(metadata_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
                
            logger.info("‚úÖ Metadados salvos")
            
        except Exception as e:
            logger.error(f"Erro ao salvar metadados: {str(e)}")
    
    def _sanitize_filename(self, filename: str) -> str:
        """Sanitiza nome do arquivo"""
        import re
        # Remove caracteres especiais
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        # Remove espa√ßos extras
        sanitized = re.sub(r'\s+', '_', sanitized)
        return sanitized
    
    def regenerate_document_with_feedback(self, doc_key: str, original_content: str, 
                                        feedback: str, analysis_results: Dict[str, Any], 
                                        project_name: str = "Projeto") -> str:
        """
        Regenera documento espec√≠fico com base no feedback
        
        Args:
            doc_key: Chave do documento
            original_content: Conte√∫do original
            feedback: Feedback do usu√°rio
            analysis_results: Dados da an√°lise
            project_name: Nome do projeto
            
        Returns:
            Novo conte√∫do do documento
        """
        try:
            logger.info(f"üîÑ Regenerando documento {doc_key} com feedback")
            
            # Obt√©m prompt espec√≠fico
            doc_config = self.document_types.get(doc_key, {})
            base_prompt = self._get_prompt_for_document(doc_config.get('prompt_type', 'analysis'))
            
            # Cria prompt com feedback
            feedback_prompt = f"""
{base_prompt}

DOCUMENTO ORIGINAL:
{original_content}

FEEDBACK DO USU√ÅRIO:
{feedback}

INSTRU√á√ïES:
- Considere o feedback fornecido
- Mantenha aspectos corretos do documento original
- Corrija problemas identificados no feedback
- Melhore a qualidade e precis√£o
- Mantenha formata√ß√£o markdown
- Foque em aspectos de backend
            """
            
            # Prepara contexto
            context = self._prepare_context(analysis_results, project_name, doc_key)
            
            # Gera novo conte√∫do
            new_content = self._generate_content(feedback_prompt, context)
            
            if new_content:
                # Salva vers√£o atualizada
                project_dir = self.docs_dir / self._sanitize_filename(project_name)
                project_dir.mkdir(exist_ok=True)
                
                doc_path = project_dir / doc_config.get('filename', f'{doc_key}.md')
                with open(doc_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                logger.info(f"‚úÖ Documento {doc_key} regenerado com sucesso")
                return new_content
            else:
                logger.warning(f"‚ö†Ô∏è Falha ao regenerar documento {doc_key}")
                return original_content
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao regenerar documento {doc_key}: {str(e)}")
            return original_content
    
    def get_document_content(self, doc_key: str, project_name: str = "Projeto") -> str:
        """Obt√©m conte√∫do de um documento espec√≠fico"""
        try:
            doc_config = self.document_types.get(doc_key, {})
            filename = doc_config.get('filename', f'{doc_key}.md')
            
            project_dir = self.docs_dir / self._sanitize_filename(project_name)
            doc_path = project_dir / filename
            
            if doc_path.exists():
                with open(doc_path, 'r', encoding='utf-8') as f:
                    return f.read()
            else:
                return ""
                
        except Exception as e:
            logger.error(f"Erro ao ler documento {doc_key}: {str(e)}")
            return ""
    
    def list_generated_documents(self, project_name: str = "Projeto") -> Dict[str, Dict[str, Any]]:
        """Lista documentos gerados para um projeto"""
        try:
            project_dir = self.docs_dir / self._sanitize_filename(project_name)
            
            if not project_dir.exists():
                return {}
            
            documents = {}
            
            for doc_key, doc_config in self.document_types.items():
                filename = doc_config.get('filename', f'{doc_key}.md')
                doc_path = project_dir / filename
                
                if doc_path.exists():
                    stat = doc_path.stat()
                    documents[doc_key] = {
                        'name': doc_config.get('name', doc_key),
                        'path': str(doc_path),
                        'size': stat.st_size,
                        'modified': datetime.fromtimestamp(stat.st_mtime).isoformat()
                    }
            
            return documents
            
        except Exception as e:
            logger.error(f"Erro ao listar documentos: {str(e)}")
            return {}
    
    def get_documentation_summary(self, project_name: str = "Projeto") -> Dict[str, Any]:
        """Obt√©m resumo da documenta√ß√£o gerada"""
        try:
            project_dir = self.docs_dir / self._sanitize_filename(project_name)
            metadata_path = project_dir / "metadata.json"
            
            if metadata_path.exists():
                with open(metadata_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return {}
                
        except Exception as e:
            logger.error(f"Erro ao obter resumo: {str(e)}")
            return {}
