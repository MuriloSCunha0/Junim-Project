"""
Interface Simplificada do JUNIM
Sistema de documenta√ß√£o e moderniza√ß√£o Delphi -> Java Spring
"""

import streamlit as st
import os
import sys
import tempfile
from pathlib import Path
from dotenv import load_dotenv

# Imports do sistema
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.append(str(parent_dir))

from core.delphi_analyzer import DelphiAnalyzer
from core.documentation_generator import DocumentationGenerator
from utils.file_handler import FileHandler

# Configura√ß√£o
load_dotenv()

class JUNIMInterface:
    """Interface Simplificada do JUNIM - Sistema de Documenta√ß√£o Delphi->Java"""
    
    def __init__(self):
        self.file_handler = FileHandler()
        self.analyzer = DelphiAnalyzer()
        self.doc_generator = DocumentationGenerator()
        
    def run(self):
        """Executa interface principal simplificada"""
        # CSS b√°sico
        st.markdown("""
        <style>
        .main { padding: 1rem; }
        .sidebar .sidebar-content { background: #f8f9fa; }
        </style>
        """, unsafe_allow_html=True)
        
        # Sidebar simples
        self._render_sidebar()
        
        # Header simples
        st.title("üöÄ JUNIM - Moderniza√ß√£o Delphi ‚Üí Java Spring")
        
        # Abas principais
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìÅ Upload/An√°lise", 
            "üìÑ Documentos", 
            "‚úÖ Feedback", 
            "‚òï Moderniza√ß√£o Java"
        ])
        
        with tab1:
            self._render_upload_tab()
        
        with tab2:
            self._render_documents_tab()
            
        with tab3:
            self._render_feedback_tab()
            
        with tab4:
            self._render_modernization_tab()
    
    def _render_sidebar(self):
        """Sidebar simplificada - apenas modelo Ollama e chave Groq"""
        st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
        
        # Sele√ß√£o de modelo Ollama
        st.sidebar.subheader("ü§ñ Modelo Ollama")
        ollama_model = st.sidebar.selectbox(
            "Modelo:",
            ["codellama:7b", "mistral:7b", "llama3:8b", "deepseek-r1:14b"],
            index=0,
            help="Modelo para an√°lise e documenta√ß√£o"
        )
        
        # Chave Groq (opcional)
        st.sidebar.subheader("üîë Chave Groq (Opcional)")
        groq_key = st.sidebar.text_input(
            "API Key:",
            type="password",
            value=st.session_state.get('groq_key', ''),
            help="Para usar modelos Groq al√©m do Ollama"
        )
        
        # Salva configura√ß√µes
        if 'config' not in st.session_state:
            st.session_state.config = {}
        
        st.session_state.config.update({
            'ollama_model': ollama_model,
            'groq_key': groq_key
        })
        
        if groq_key:
            st.session_state.groq_key = groq_key
            st.sidebar.success("‚úÖ Groq configurado")
    
    def _render_upload_tab(self):
        """Aba de upload e an√°lise do projeto Delphi"""
        st.header("üìÅ Upload do Projeto Delphi")
        
        uploaded_file = st.file_uploader(
            "Selecione arquivo .pas ou .zip do projeto:",
            type=['pas', 'zip', 'dpr'],
            help="Arquivo principal ou projeto compactado"
        )
        
        if uploaded_file is not None:
            if st.button("üîç Analisar Projeto"):
                with st.spinner("Analisando projeto Delphi..."):
                    try:
                        # Salva arquivo tempor√°rio
                        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
                            tmp_file.write(uploaded_file.getvalue())
                            temp_path = tmp_file.name
                        
                        # An√°lise
                        analysis_result = self.analyzer.analyze_project(temp_path)
                        st.session_state.analysis_results = analysis_result
                        st.session_state.project_path = temp_path
                        
                        # Gera documenta√ß√£o autom√°tica
                        config = st.session_state.get('config', {})
                        docs = self.doc_generator.generate_all_documents(
                            analysis_result, 
                            config
                        )
                        st.session_state.generated_docs = docs
                        
                        st.success("‚úÖ Projeto analisado e documenta√ß√£o gerada!")
                        
                        # Preview dos resultados
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Arquivos Analisados", analysis_result.get('file_count', 0))
                        with col2:
                            st.metric("Documentos Gerados", len(docs))
                            
                    except Exception as e:
                        st.error(f"‚ùå Erro na an√°lise: {str(e)}")
                    finally:
                        # Limpa arquivo tempor√°rio
                        if 'temp_path' in locals():
                            os.unlink(temp_path)
        
        # Status do projeto atual
        if st.session_state.get('analysis_results'):
            st.info("‚úÖ Projeto carregado e analisado")
            project_name = st.session_state.analysis_results.get('metadata', {}).get('project_name', 'Projeto Delphi')
            st.write(f"**Projeto:** {project_name}")
    
    def _render_documents_tab(self):
        """Aba para visualizar documentos gerados"""
        st.header("üìÑ Documentos Gerados")
        
        docs = st.session_state.get('generated_docs', {})
        if not docs:
            st.warning("‚ö†Ô∏è Nenhum documento dispon√≠vel. Fa√ßa upload de um projeto primeiro.")
            return
        
        # Seletor de documento
        doc_types = list(docs.keys())
        selected_doc = st.selectbox("Selecione documento:", doc_types)
        
        if selected_doc and docs.get(selected_doc):
            # √Årea de exibi√ß√£o do documento
            st.subheader(f"üìã {selected_doc.replace('_', ' ').title()}")
            
            # Op√ß√µes de visualiza√ß√£o
            view_mode = st.radio("Modo de visualiza√ß√£o:", ["Renderizado", "Markdown Raw"], horizontal=True)
            
            content = docs[selected_doc]
            
            if view_mode == "Renderizado":
                st.markdown(content)
            else:
                st.code(content, language="markdown")
            
            # Download do documento
            st.download_button(
                label=f"‚¨áÔ∏è Download {selected_doc}",
                data=content,
                file_name=f"{selected_doc}.md",
                mime="text/markdown"
            )
    
    def _render_feedback_tab(self):
        """Aba para confirmar documentos e dar feedback"""
        st.header("‚úÖ Confirma√ß√£o e Feedback")
        
        docs = st.session_state.get('generated_docs', {})
        if not docs:
            st.warning("‚ö†Ô∏è Nenhum documento para confirmar. Gere documenta√ß√£o primeiro.")
            return
        
        # Inicializa checklist
        if 'feedback_checklist' not in st.session_state:
            st.session_state.feedback_checklist = {k: True for k in docs.keys()}
        
        st.subheader("üìã Checklist de Documentos")
        
        # Lista de documentos com checkbox
        for doc_type in docs.keys():
            col1, col2, col3 = st.columns([0.1, 0.6, 0.3])
            
            with col1:
                approved = st.checkbox(
                    "‚úì",
                    value=st.session_state.feedback_checklist.get(doc_type, True),
                    key=f"chk_{doc_type}",
                    help="Aprovar documento"
                )
                st.session_state.feedback_checklist[doc_type] = approved
            
            with col2:
                icon = "‚úÖ" if approved else "‚è≥"
                st.write(f"{icon} **{doc_type.replace('_', ' ').title()}**")
            
            with col3:
                if st.button(f"üëÅÔ∏è Ver", key=f"view_{doc_type}"):
                    st.session_state.view_doc = doc_type
        
        # √Årea de feedback geral
        st.subheader("üí¨ Feedback Geral")
        feedback = st.text_area(
            "Coment√°rios sobre a documenta√ß√£o:",
            value=st.session_state.get('general_feedback', ''),
            help="Observa√ß√µes, melhorias ou problemas encontrados"
        )
        st.session_state.general_feedback = feedback
        
        # Bot√£o de confirma√ß√£o final
        approved_count = sum(st.session_state.feedback_checklist.values())
        total_count = len(docs)
        
        if st.button(f"‚úÖ Confirmar Documenta√ß√£o ({approved_count}/{total_count} aprovados)"):
            if approved_count == total_count:
                st.success("üéâ Todos os documentos aprovados! Pronto para moderniza√ß√£o.")
                st.session_state.docs_approved = True
            else:
                st.warning(f"‚ö†Ô∏è {total_count - approved_count} documento(s) pendente(s) de aprova√ß√£o.")
    
    def _render_modernization_tab(self):
        """Aba de moderniza√ß√£o para Java Spring"""
        st.header("‚òï Moderniza√ß√£o para Java Spring")
        
        if not st.session_state.get('docs_approved', False):
            st.warning("‚ö†Ô∏è Confirme a documenta√ß√£o na aba anterior antes de modernizar.")
            return
        
        st.info("üöß **Funcionalidade em desenvolvimento**")
        st.markdown("""
        Esta aba ir√° conter:
        - üèóÔ∏è Gera√ß√£o de estrutura Spring Boot
        - üìù Convers√£o de classes Delphi ‚Üí Java
        - üóÑÔ∏è Mapeamento de banco de dados
        - ‚öôÔ∏è Configura√ß√£o de depend√™ncias
        - üì¶ Gera√ß√£o do projeto final
        """)
        
        # Placeholder para futuras funcionalidades
        if st.button("üîÑ Iniciar Moderniza√ß√£o (Em breve)"):
            st.warning("Funcionalidade ser√° implementada na pr√≥xima vers√£o.")

    def _render_feedback_interface(self):
        """Interface de feedback com checklist dos documentos gerados"""
        st.header("‚úÖ Checklist de Documenta√ß√£o T√©cnica")
        
        docs = st.session_state.get('generated_docs', {})
        if not docs:
            st.warning("Nenhum documento gerado para feedback.")
            st.info("V√° para a aba 'An√°lise de Backend' para gerar documenta√ß√£o primeiro.")
            return

        # Inicializa checklist - por padr√£o todos marcados
        if 'feedback_checklist' not in st.session_state:
            st.session_state.feedback_checklist = {k: True for k in docs.keys()}
        
        # Bot√£o para marcar/desmarcar todos
        col1, col2 = st.columns([1, 2])
        with col1:
            if st.button("‚úÖ Marcar Todos"):
                st.session_state.feedback_checklist = {k: True for k in docs.keys()}
                st.rerun()
        with col2:
            if st.button("‚ùå Desmarcar Todos"):
                st.session_state.feedback_checklist = {k: False for k in docs.keys()}
                st.rerun()

        st.markdown("---")
        
        # Lista de documentos com checkboxes
        st.subheader("üìã Documentos Gerados")
        
        for doc_type, content in docs.items():
            col1, col2, col3 = st.columns([0.1, 0.7, 0.2])
            
            with col1:
                # Checkbox para aprova√ß√£o
                checked = st.checkbox(
                    "Aprovar", 
                    value=st.session_state.feedback_checklist.get(doc_type, True),
                    key=f"chk_{doc_type}",
                    help="Marque para aprovar este documento",
                    label_visibility="collapsed"
                )
                st.session_state.feedback_checklist[doc_type] = checked
                
            with col2:
                # Nome do documento
                status = "‚úÖ Aprovado" if checked else "‚è≥ Pendente"
                st.write(f"**{doc_type}** - {status}")
                
            with col3:
                # Bot√£o para ver/editar
                if st.button("üìñ Ver", key=f"btn_{doc_type}"):
                    st.session_state.selected_doc = doc_type

        # Progresso
        approved_count = sum(1 for v in st.session_state.feedback_checklist.values() if v)
        total_count = len(docs)
        progress = approved_count / total_count if total_count > 0 else 0
        
        st.markdown("---")
        st.subheader("üìä Progresso da Aprova√ß√£o")
        st.progress(progress)
        st.write(f"**{approved_count}/{total_count} documentos aprovados**")
        
        if approved_count == total_count:
            st.success("üéâ Todos os documentos aprovados! Voc√™ pode prosseguir para a moderniza√ß√£o.")
        else:
            st.info(f"‚è≥ {total_count - approved_count} documento(s) pendente(s) de aprova√ß√£o.")

        # Exibe documento selecionado para feedback detalhado
        selected = st.session_state.get('selected_doc')
        if selected and selected in docs:
            st.markdown("---")
            st.subheader(f"üìÑ {selected}")
            
            # Tabs para visualiza√ß√£o e feedback
            tab1, tab2 = st.tabs(["üëÅÔ∏è Visualizar", "üí¨ Feedback"])
            
            with tab1:
                st.markdown(docs[selected])
                
                # Bot√£o para download individual
                st.download_button(
                    label=f"üíæ Download {selected}",
                    data=docs[selected],
                    file_name=f"{selected.replace(' ', '_').lower()}.md",
                    mime="text/markdown"
                )
                
            with tab2:
                feedback = st.text_area(
                    "Forne√ßa feedback sobre este documento (opcional):",
                    placeholder="Ex: Falta mais detalhes sobre..., Corrija a se√ß√£o..., Inclua exemplos de...",
                    height=150
                )
                
                if st.button("üîÑ Regenerar com Feedback", key=f"regen_{selected}"):
                    if feedback.strip():
                        # Regenerar documento com feedback
                        with st.spinner("Regenerando documento..."):
                            try:
                                # Aqui voc√™ integraria com o DocumentationGenerator
                                # Por agora, apenas uma simula√ß√£o
                                st.info("Funcionalidade de regenera√ß√£o ser√° implementada com o DocumentationGenerator")
                                st.success(f"Documento '{selected}' seria regenerado com o feedback fornecido!")
                            except Exception as e:
                                st.error(f"Erro ao regenerar: {str(e)}")
                    else:
                        st.warning("Forne√ßa um feedback para regenerar o documento.")

    def _all_feedback_confirmed(self):
        """Verifica se todos os documentos est√£o marcados como confirmados"""
        checklist = st.session_state.get('feedback_checklist', {})
        docs = st.session_state.get('generated_docs', {})
        return checklist and docs and all(checklist.get(doc_type, False) for doc_type in docs.keys())
    
    def _render_modernization_interface(self):
        """Renderiza a interface de moderniza√ß√£o focada em backend, com preview e download"""
        st.header("üöÄ Moderniza√ß√£o Backend - Java Spring Boot")
        
        # Verifica se h√° documentos aprovados
        if not self._all_feedback_confirmed():
            st.warning("‚ö†Ô∏è Aprove todos os documentos na aba 'Feedback' antes de prosseguir com a moderniza√ß√£o.")
            return
        
        # Informa√ß√µes da documenta√ß√£o aprovada
        docs = st.session_state.get('generated_docs', {})
        if docs:
            st.subheader("üìÑ Documenta√ß√£o T√©cnica Aprovada")
            approved_docs = [doc for doc, approved in st.session_state.get('feedback_checklist', {}).items() if approved]
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìã Documentos Aprovados", len(approved_docs))
            with col2:
                st.metric("üìä Total de Documentos", len(docs))
            with col3:
                approval_rate = len(approved_docs) / len(docs) * 100 if docs else 0
                st.metric("‚úÖ Taxa de Aprova√ß√£o", f"{approval_rate:.0f}%")
            
            # Lista dos documentos aprovados
            with st.expander("üìã Ver Documentos Aprovados"):
                for doc_type in approved_docs:
                    st.write(f"‚úÖ **{doc_type}**")

        st.markdown("---")
        
        # Preview do fluxo do novo projeto
        st.subheader("üîç Preview do Projeto Java Spring Boot")
        
        # Estrutura do projeto
        with st.expander("üìÅ Estrutura do Projeto"):
            st.code("""
src/main/java/com/projeto/
‚îú‚îÄ‚îÄ üìÇ config/
‚îÇ   ‚îú‚îÄ‚îÄ DatabaseConfig.java
‚îÇ   ‚îú‚îÄ‚îÄ SecurityConfig.java
‚îÇ   ‚îî‚îÄ‚îÄ WebConfig.java
‚îú‚îÄ‚îÄ üìÇ controller/
‚îÇ   ‚îú‚îÄ‚îÄ CustomerController.java
‚îÇ   ‚îú‚îÄ‚îÄ ProductController.java
‚îÇ   ‚îî‚îÄ‚îÄ OrderController.java
‚îú‚îÄ‚îÄ üìÇ service/
‚îÇ   ‚îú‚îÄ‚îÄ CustomerService.java
‚îÇ   ‚îú‚îÄ‚îÄ ProductService.java
‚îÇ   ‚îî‚îÄ‚îÄ OrderService.java
‚îú‚îÄ‚îÄ üìÇ repository/
‚îÇ   ‚îú‚îÄ‚îÄ CustomerRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ ProductRepository.java
‚îÇ   ‚îî‚îÄ‚îÄ OrderRepository.java
‚îú‚îÄ‚îÄ üìÇ entity/
‚îÇ   ‚îú‚îÄ‚îÄ Customer.java
‚îÇ   ‚îú‚îÄ‚îÄ Product.java
‚îÇ   ‚îî‚îÄ‚îÄ Order.java
‚îú‚îÄ‚îÄ üìÇ dto/
‚îÇ   ‚îú‚îÄ‚îÄ CustomerDTO.java
‚îÇ   ‚îú‚îÄ‚îÄ ProductDTO.java
‚îÇ   ‚îî‚îÄ‚îÄ OrderDTO.java
‚îî‚îÄ‚îÄ üìÇ exception/
    ‚îú‚îÄ‚îÄ GlobalExceptionHandler.java
    ‚îî‚îÄ‚îÄ BusinessException.java

src/test/java/com/projeto/
‚îú‚îÄ‚îÄ üìÇ controller/
‚îú‚îÄ‚îÄ üìÇ service/
‚îî‚îÄ‚îÄ üìÇ repository/
            """, language="text")
        
        # Fluxo da aplica√ß√£o
        with st.expander("üîÑ Fluxo da Aplica√ß√£o"):
            st.markdown("""
            ```
            Cliente HTTP ‚Üí Controller ‚Üí Service ‚Üí Repository ‚Üí Database
                         ‚Üì
            Valida√ß√£o ‚Üí Transforma√ß√£o ‚Üí Regras de Neg√≥cio ‚Üí Persist√™ncia
                         ‚Üì
            Response ‚Üê DTO ‚Üê Entity ‚Üê Data Access Layer
            ```
            """)
        
        # Tecnologias utilizadas
        with st.expander("‚öôÔ∏è Tecnologias e Depend√™ncias"):
            st.markdown("""
            **Framework Principal:**
            - Spring Boot 3.x
            - Spring Data JPA
            - Spring Web
            - Spring Security
            
            **Banco de Dados:**
            - H2 Database (desenvolvimento)
            - PostgreSQL (produ√ß√£o)
            
            **Testes:**
            - JUnit 5
            - Mockito
            - TestContainers
            
            **Outros:**
            - Maven
            - Docker
            - Swagger/OpenAPI
            """ )

        st.markdown("---")
        
        # Arquivos que ser√£o gerados
        st.subheader("üìÅ Arquivos que ser√£o Gerados")
        
        # Simula lista de arquivos baseada na an√°lise
        analysis = st.session_state.get('analysis_results', {})
        estimated_files = self._estimate_generated_files(analysis)
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**üìÇ C√≥digo Principal:**")
            for file in estimated_files.get('main', []):
                st.write(f"- {file}")
        
        with col2:
            st.markdown("**üß™ Testes:**")
            for file in estimated_files.get('test', []):
                st.write(f"- {file}")
        
        st.markdown("---")
        
        # Configura√ß√µes de moderniza√ß√£o
        st.subheader("‚öôÔ∏è Configura√ß√µes de Moderniza√ß√£o")
        
        col1, col2 = st.columns(2)
        with col1:
            java_version = st.selectbox(
                "Vers√£o Java:",
                ["Java 17", "Java 11", "Java 8"],
                index=0
            )
            
            spring_version = st.selectbox(
                "Vers√£o Spring Boot:",
                ["3.2.x", "3.1.x", "2.7.x"],
                index=0
            )
        
        with col2:
            include_tests = st.checkbox("Gerar Testes Unit√°rios", value=True)
            include_integration = st.checkbox("Gerar Testes de Integra√ß√£o", value=True)
            include_docker = st.checkbox("Incluir Dockerfile", value=True)
            include_swagger = st.checkbox("Incluir Swagger/OpenAPI", value=True)

        st.markdown("---")
        
        # Bot√µes de a√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üöÄ Iniciar Moderniza√ß√£o", type="primary", use_container_width=True):
                self._start_modernization({
                    'java_version': java_version,
                    'spring_version': spring_version,
                    'include_tests': include_tests,
                    'include_integration': include_integration,
                    'include_docker': include_docker,
                    'include_swagger': include_swagger
                })
        
        with col2:
            # Bot√£o de download (s√≥ aparece se projeto foi gerado)
            if st.session_state.get('modernized_project_path'):
                with open(st.session_state['modernized_project_path'], 'rb') as f:
                    st.download_button(
                        label="üì• Download Projeto (.zip)",
                        data=f.read(),
                        file_name="projeto_modernizado.zip",
                        mime="application/zip",
                        use_container_width=True
                    )
            else:
                st.info("O bot√£o de download aparecer√° ap√≥s a moderniza√ß√£o.")

    def _estimate_generated_files(self, analysis):
        """Estima arquivos que ser√£o gerados baseado na an√°lise"""
        # Simula√ß√£o baseada na an√°lise
        units = analysis.get('units_analysis', {})
        estimated_files = {
            'main': [],
            'test': []
        }
        
        # Arquivos principais baseados nas units
        for unit_name in units.keys():
            class_name = unit_name.replace('.pas', '').replace('.dfm', '')
            estimated_files['main'].extend([
                f"{class_name}Controller.java",
                f"{class_name}Service.java", 
                f"{class_name}Repository.java",
                f"{class_name}Entity.java",
                f"{class_name}DTO.java"
            ])
            
            # Arquivos de teste
            estimated_files['test'].extend([
                f"{class_name}ControllerTest.java",
                f"{class_name}ServiceTest.java",
                f"{class_name}RepositoryTest.java"
            ])
        
        # Arquivos de configura√ß√£o sempre presentes
        estimated_files['main'].extend([
            "Application.java",
            "DatabaseConfig.java",
            "WebConfig.java",
            "SecurityConfig.java",
            "GlobalExceptionHandler.java"
        ])
        
        return estimated_files

    def _start_modernization(self, config):
        """Inicia o processo de moderniza√ß√£o"""
        with st.spinner("üîÑ Iniciando moderniza√ß√£o..."):
            try:
                # Simula processo de moderniza√ß√£o
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Passos da moderniza√ß√£o
                steps = [
                    "Preparando documenta√ß√£o...",
                    "Gerando estrutura do projeto...",
                    "Criando entities e DTOs...",
                    "Implementando controllers...",
                    "Criando services...",
                    "Configurando repositories...",
                    "Gerando testes...",
                    "Criando arquivos de configura√ß√£o...",
                    "Empacotando projeto..."
                ]
                
                for i, step in enumerate(steps):
                    status_text.text(step)
                    progress_bar.progress((i + 1) / len(steps))
                    # Simula tempo de processamento
                    import time
                    time.sleep(0.5)
                
                # Simula cria√ß√£o do arquivo ZIP
                st.session_state['modernized_project_path'] = "/tmp/projeto_modernizado.zip"
                
                status_text.text("‚úÖ Moderniza√ß√£o conclu√≠da!")
                st.success("üéâ Projeto Java Spring Boot gerado com sucesso!")
                st.info("Use o bot√£o 'Download Projeto' para baixar o resultado.")
                
                # Mostra resumo
                st.subheader("üìä Resumo da Moderniza√ß√£o")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìÅ Arquivos Gerados", "47")
                with col2:
                    st.metric("üß™ Testes Criados", "23")
                with col3:
                    st.metric("‚öôÔ∏è Configura√ß√µes", "8")
                
            except Exception as e:
                st.error(f"‚ùå Erro durante moderniza√ß√£o: {str(e)}")
                st.info("Verifique as configura√ß√µes e tente novamente.")
    
    def _render_documentation_interface(self):
        """Renderiza interface de gera√ß√£o de documenta√ß√£o t√©cnica - VERS√ÉO OTIMIZADA"""
        st.header("üìã Documenta√ß√£o T√©cnica Espec√≠fica")
        
        # Verifica se h√° an√°lise pr√©via
        if hasattr(st.session_state, 'last_analysis_results') and st.session_state.last_analysis_results:
            # Informa√ß√µes do projeto analisado
            metadata = st.session_state.last_analysis_results.get('metadata', {})
            project_name = metadata.get('project_name', 'Projeto')
            total_files = metadata.get('total_files_analyzed', 0)
            
            st.success(f"‚úÖ An√°lise dispon√≠vel: **{project_name}** ({total_files} arquivos)")
            
            st.markdown("### üéØ Documentos Essenciais")
            
            # Coluna para sele√ß√£o mais organizada
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìä An√°lise T√©cnica:**")
                analysis_docs = st.checkbox("üîß An√°lise de Backend", value=True, 
                                           help="An√°lise detalhada das funcionalidades e estruturas Delphi")
                mapping_docs = st.checkbox("üîó Mapeamento Delphi ‚Üí Java", value=True,
                                         help="Correla√ß√µes e sugest√µes de convers√£o para Spring Boot")
                
            with col2:
                st.markdown("**üé® Visualiza√ß√£o:**")
                mermaid_diagram = st.checkbox("üìä Diagrama Mermaid", value=True,
                                            help="Diagrama visual da arquitetura do projeto")
                testing_docs = st.checkbox("üß™ Estrat√©gia de Testes", value=False,
                                         help="Plano de testes para o projeto convertido")
            
            # Bot√£o de gera√ß√£o
            st.markdown("---")
            
            col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
            with col_btn2:
                if st.button("ÔøΩ Gerar Documenta√ß√£o Espec√≠fica", type="primary", use_container_width=True):
                    # Monta lista de documentos selecionados
                    selected_docs = []
                    if analysis_docs:
                        selected_docs.append("An√°lise de Funcionalidades")
                    if mapping_docs:
                        selected_docs.append("Mapeamento Delphi ‚Üí Java")
                    if mermaid_diagram:
                        selected_docs.append("Diagrama Mermaid")
                    if testing_docs:
                        selected_docs.append("Estrat√©gia de Testes")
                    
                    if selected_docs:
                        with st.spinner("üîÑ Gerando documenta√ß√£o espec√≠fica..."):
                            self._generate_technical_documentation(selected_docs)
                    else:
                        st.warning("‚ö†Ô∏è Selecione pelo menos um tipo de documenta√ß√£o.")
            
            # Op√ß√£o r√°pida
            st.markdown("### ‚ö° Op√ß√£o R√°pida")
            if st.button("üéØ Gerar An√°lise + Diagrama (Recomendado)", type="secondary"):
                quick_docs = ["An√°lise de Funcionalidades", "Mapeamento Delphi ‚Üí Java", "Diagrama Mermaid"]
                with st.spinner("üîÑ Gerando documenta√ß√£o essencial..."):
                    self._generate_technical_documentation(quick_docs)
            
            # Mostra documenta√ß√£o gerada
            self._display_generated_documentation()
            
        else:
            st.info("üîç Realize primeiro uma an√°lise de backend na aba 'An√°lise de Backend' para gerar documenta√ß√£o.")
    
    def _generate_technical_documentation(self, doc_types):
        """Gera documenta√ß√£o t√©cnica espec√≠fica baseada na an√°lise - VERS√ÉO CORRIGIDA"""
        try:
            # Carrega resultados da an√°lise
            analysis_results = st.session_state.last_analysis_results
            
            if not hasattr(st.session_state, 'generated_docs'):
                st.session_state.generated_docs = {}
            
            # Importa DocumentationGenerator corrigido
            from core.documentation_generator import DocumentationGenerator
            from prompts.specialized_prompts import PromptManager
            from config.universal_model_config import get_development_config
            
            # Configura√ß√£o otimizada para VS Code
            model_name = st.session_state.get('selected_model', 'codellama:7b')
            config = get_development_config(model_name)
            config.update({
                'ollama_model': model_name,
                'use_fallback': True,
                'quick_mode': True
            })
            
            # Cria servi√ßos otimizados
            prompt_manager = PromptManager(performance_mode='development', model_name=model_name)
            doc_generator = DocumentationGenerator(llm_service=self.pipeline.llm_service, 
                                                  prompt_manager=prompt_manager)
            
            # Mapeia tipos solicitados para tipos internos
            doc_type_mapping = {
                "An√°lise de Funcionalidades": "backend_analysis",
                "Fluxos de Execu√ß√£o": "backend_analysis", 
                "Mapeamento Delphi ‚Üí Java": "functionality_mapping",
                "Arquitetura Spring Boot Sugerida": "functionality_mapping",
                "Diagrama Mermaid": "mermaid_diagram",
                "Estrat√©gia de Testes": "testing_strategy"
            }
            
            # Determina quais documentos gerar
            docs_to_generate = []
            include_mermaid = False
            
            for doc_type in doc_types:
                mapped_type = doc_type_mapping.get(doc_type)
                if mapped_type == "mermaid_diagram":
                    include_mermaid = True
                elif mapped_type and mapped_type not in docs_to_generate:
                    docs_to_generate.append(mapped_type)
            
            # Se nenhum documento espec√≠fico, gera an√°lise b√°sica
            if not docs_to_generate and not include_mermaid:
                docs_to_generate = ["backend_analysis"]
                include_mermaid = True
            
            # Gera documenta√ß√£o espec√≠fica
            project_name = analysis_results.get('metadata', {}).get('project_name', 'Projeto')
            
            with st.spinner("üîÑ Gerando documenta√ß√£o espec√≠fica..."):
                generated_docs = doc_generator.generate_specific_documentation(
                    analysis_results=analysis_results,
                    project_name=project_name,
                    include_mermaid=include_mermaid,
                    documents_to_generate=docs_to_generate
                )
            
            # Carrega conte√∫do dos documentos gerados
            for doc_type, file_path in generated_docs.items():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Mapeia de volta para nomes de exibi√ß√£o
                    display_name = {
                        'backend_analysis': 'An√°lise de Funcionalidades',
                        'functionality_mapping': 'Mapeamento Delphi ‚Üí Java',
                        'testing_strategy': 'Estrat√©gia de Testes',
                        'mermaid_diagram': 'Diagrama Mermaid',
                        'readme': 'Resumo do Projeto'
                    }.get(doc_type, doc_type.title())
                    
                    st.session_state.generated_docs[display_name] = content
                    
                except Exception as e:
                    logger.warning(f"Erro ao carregar {doc_type}: {str(e)}")
            
            st.success(f"‚úÖ Documenta√ß√£o espec√≠fica gerada: {len(st.session_state.generated_docs)} documentos!")
            
            # Exibe informa√ß√£o sobre os arquivos salvos
            if generated_docs:
                st.info(f"üìÅ Arquivos salvos em: generated_docs/{project_name}/")
                
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar documenta√ß√£o: {str(e)}")
            logger.error(f"Erro detalhado: {str(e)}", exc_info=True)
    
    def _get_prompt_type_for_doc(self, doc_type):
        """Mapeia tipo de documenta√ß√£o para tipo de prompt - VERS√ÉO OTIMIZADA"""
        mapping = {
            "An√°lise de Funcionalidades": "backend_analysis",
            "Fluxos de Execu√ß√£o": "analysis",
            "Mapeamento Delphi ‚Üí Java": "functionality_mapping",
            "Arquitetura Spring Boot Sugerida": "conversion",
            "Diagrama Mermaid": "mermaid_diagram",
            "Estrat√©gia de Testes": "testing"
        }
        return mapping.get(doc_type, "analysis")
    
    def _display_generated_documentation(self):
        """Exibe documenta√ß√£o gerada - VERS√ÉO MELHORADA COM SUPORTE MERMAID"""
        if hasattr(st.session_state, 'generated_docs') and st.session_state.generated_docs:
            st.subheader("üìÑ Documenta√ß√£o Gerada")
            
            # Organiza documentos por categoria
            doc_categories = {
                "üìä An√°lise T√©cnica": ["An√°lise de Funcionalidades", "Mapeamento Delphi ‚Üí Java"],
                "üé® Visualiza√ß√£o": ["Diagrama Mermaid"],
                "üß™ Testes": ["Estrat√©gia de Testes"],
                "üìã Resumo": ["Resumo do Projeto"]
            }
            
            for category, doc_types in doc_categories.items():
                category_docs = [doc for doc in doc_types if doc in st.session_state.generated_docs]
                
                if category_docs:
                    st.markdown(f"### {category}")
                    
                    for doc_type in category_docs:
                        content = st.session_state.generated_docs[doc_type]
                        
                        with st.expander(f"üìã {doc_type}", expanded=(doc_type == "Diagrama Mermaid")):
                            
                            # Tratamento especial para diagramas Mermaid
                            if doc_type == "Diagrama Mermaid":
                                st.markdown("### üéØ Arquitetura do Projeto")
                                
                                # Extrai c√≥digo Mermaid do conte√∫do
                                if "```mermaid" in content:
                                    # Encontra o c√≥digo Mermaid
                                    start = content.find("```mermaid") + 10
                                    end = content.find("```", start)
                                    if end > start:
                                        mermaid_code = content[start:end].strip()
                                        
                                        # Exibe o diagrama
                                        st.markdown("**Diagrama:**")
                                        st.code(mermaid_code, language="mermaid")
                                        
                                        # Link para visualizar online
                                        import urllib.parse
                                        encoded_diagram = urllib.parse.quote(mermaid_code)
                                        mermaid_live_url = f"https://mermaid.live/edit#pako:eNpdjkEKwjAQRa8S5uqF3LkzuiqupOuQTCdt7SSBJKtSencSFSku_vfef_BmObOCJsYbeYJHgNdS6ahV57Q1FdJdKTdOp0qn8SuVL95gDWfBSi0RobkgRrAa4BW0skoTJ16z4MrW2O4sttKJHjv3ks88f7F1lZeN5fInWXcvdqg7qQ"
                                        st.markdown(f"üîó [Visualizar no Mermaid Live Editor]({mermaid_live_url})")
                                
                                # Exibe o conte√∫do completo como markdown
                                st.markdown("**Documenta√ß√£o Completa:**")
                                st.markdown(content)
                            else:
                                # Para outros tipos de documento, exibe normalmente
                                st.markdown(content)
                            
                            # Bot√£o para download
                            filename = f"{doc_type.replace(' ', '_').lower()}.md"
                            st.download_button(
                                label=f"üíæ Download {doc_type}",
                                data=content,
                                file_name=filename,
                                mime="text/markdown",
                                key=f"download_{doc_type}"
                            )
            
            # Bot√£o para limpar documenta√ß√£o
            st.markdown("---")
            if st.button("üóëÔ∏è Limpar Documenta√ß√£o", type="secondary"):
                if 'generated_docs' in st.session_state:
                    del st.session_state.generated_docs
                st.rerun()
        else:
            st.info("üìù Nenhuma documenta√ß√£o gerada ainda. Use a aba 'Documenta√ß√£o T√©cnica' para gerar.")

    def _render_dashboard(self):
        """Renderiza dashboard de estat√≠sticas e informa√ß√µes"""
        st.header("üìä Dashboard do JUNIM")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üîç An√°lises Realizadas",
                value=len(getattr(st.session_state, 'analysis_history', [])),
                delta=None
            )
        
        with col2:
            st.metric(
                label="üîÑ Moderniza√ß√µes",
                value=len(getattr(st.session_state, 'modernization_history', [])),
                delta=None
            )
        
        with col3:
            st.metric(
                label="üìÑ Documentos Gerados",
                value=len(getattr(st.session_state, 'generated_docs', {})),
                delta=None
            )
        
        with col4:
            st.metric(
                label="‚öôÔ∏è Configura√ß√µes",
                value="OK" if hasattr(st.session_state, 'config') else "Pendente",
                delta=None
            )
        
        # Informa√ß√µes sobre o sistema
        st.subheader("‚ÑπÔ∏è Sobre o JUNIM")
        st.markdown("""
        ### Java Unified Interoperability Migration
        
        **JUNIM** √© uma ferramenta avan√ßada para moderniza√ß√£o de sistemas legados Delphi, 
        oferecendo an√°lise detalhada e migra√ß√£o autom√°tica para Java Spring Boot.
        
        #### üéØ Principais Funcionalidades:
        
        1. **üìã An√°lise Detalhada**: Extra√ß√£o de requisitos, funcionalidades e fluxos
        2. **üìù Documenta√ß√£o Autom√°tica**: Gera√ß√£o de documenta√ß√£o t√©cnica completa
        3. **üîó Mapeamento de Correla√ß√µes**: Delphi ‚Üí Java Spring equivalentes
        4. **üîÑ Moderniza√ß√£o Completa**: Convers√£o autom√°tica do c√≥digo
        5. **üìä M√©tricas de Qualidade**: An√°lise de complexidade e manutenibilidade
        
        #### üõ†Ô∏è Tecnologias Utilizadas:
        - **Python** com Streamlit para interface
        - **Groq API** para processamento IA de alto desempenho
        - **Ollama** para modelos locais como fallback
        - **Regex avan√ßado** para parsing de c√≥digo Delphi
        - **Templates Spring Boot** para gera√ß√£o de c√≥digo
        
        #### üìà Benef√≠cios:
        - ‚ö° **Rapidez**: An√°lise em minutos vs. semanas manuais
        - üéØ **Precis√£o**: Preserva√ß√£o da l√≥gica de neg√≥cio
        - üìö **Documenta√ß√£o**: Cria√ß√£o autom√°tica de documenta√ß√£o t√©cnica
        - üîÑ **Iterativo**: An√°lise antes da moderniza√ß√£o
        - üõ°Ô∏è **Confi√°vel**: M√∫ltiplas valida√ß√µes e verifica√ß√µes
        """)
        
        # Configura√ß√µes atuais
        if hasattr(st.session_state, 'config'):
            with st.expander("‚öôÔ∏è Configura√ß√µes Atuais"):
                config = st.session_state.config
                st.json({
                    "groq_model": config.get("groq_model", "N/A"),
                    "ollama_model": config.get("ollama_model", "N/A"),
                    "ollama_url": config.get("ollama_url", "N/A"),
                    "groq_configured": bool(config.get("groq_api_key", "")),
                })
        
        # Links √∫teis
        st.subheader("üîó Links √öteis")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            **üìö Documenta√ß√£o**
            - [Spring Boot Guide](https://spring.io/guides)
            - [Java Migration Best Practices](https://docs.oracle.com/javase/8/docs/)
            """)
        
        with col2:
            st.markdown("""
            **üõ†Ô∏è Ferramentas**
            - [Groq Console](https://console.groq.com/)
            - [Ollama Documentation](https://ollama.ai/docs)
            """)
        
        with col3:
            st.markdown("""
            **üéì Recursos**
            - [Delphi to Java Migration](https://example.com)
            - [Legacy System Modernization](https://example.com)
            """)
    
    
    def _run_modernization(self, uploaded_file):
        """Executa o pipeline de moderniza√ß√£o"""
        try:
            # Valida√ß√£o do arquivo
            if uploaded_file is None:
                st.error("‚ùå Arquivo n√£o encontrado. Por favor, fa√ßa o upload novamente.")
                return
            
            # Verifica se o arquivo tem os m√©todos necess√°rios
            if not hasattr(uploaded_file, 'getvalue') and not hasattr(uploaded_file, 'getbuffer'):
                st.error("‚ùå Arquivo inv√°lido. Por favor, fa√ßa o upload de um arquivo ZIP v√°lido.")
                return
            
            # Carrega configura√ß√µes da moderniza√ß√£o
            config = getattr(st.session_state, 'modernization_config', {})
            
            # Inicializa o pipeline com as configura√ß√µes
            pipeline_config = st.session_state.config.copy()
            pipeline_config.update(config)
            self.pipeline = ModernizationPipeline(pipeline_config)
            
            # Container para progresso
            progress_container = st.container()
            
            with progress_container:
                st.header("üîÑ Moderniza√ß√£o em Andamento")
                
                # Barra de progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Callback para atualizar progresso
                def update_progress(step, total_steps, message):
                    progress = step / total_steps
                    progress_bar.progress(progress)
                    status_text.text(f"Passo {step}/{total_steps}: {message}")
                
                # Cria arquivo tempor√°rio para o upload
                with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as tmp_file:
                    try:
                        # Tenta usar getvalue() primeiro, depois getbuffer()
                        if hasattr(uploaded_file, 'getvalue'):
                            file_content = uploaded_file.getvalue()
                        elif hasattr(uploaded_file, 'getbuffer'):
                            uploaded_file.seek(0)  # Garante que est√° no in√≠cio
                            file_content = uploaded_file.getbuffer()
                        else:
                            raise Exception("M√©todo de leitura do arquivo n√£o suportado")
                        
                        if len(file_content) == 0:
                            st.error("‚ùå Arquivo est√° vazio. Por favor, selecione um arquivo v√°lido.")
                            return
                        
                        tmp_file.write(file_content)
                        temp_path = tmp_file.name
                        
                        # Valida se o arquivo foi criado corretamente
                        if not os.path.exists(temp_path) or os.path.getsize(temp_path) == 0:
                            st.error("‚ùå Erro ao criar arquivo tempor√°rio.")
                            return
                        
                    except Exception as file_error:
                        st.error(f"‚ùå Erro ao processar arquivo: {str(file_error)}")
                        logger.error(f"Erro ao processar arquivo no pipeline: {str(file_error)}")
                        return
                
                try:
                    # FOR√áA o uso de prompts especializados
                    if config.get('use_specialized_prompts', True):
                        try:
                            from prompts.specialized_prompts import PromptManager
                            prompt_manager = PromptManager()
                            update_progress(1, 8, "‚úÖ Carregando SEUS prompts especializados...")
                            self.pipeline.set_prompt_manager(prompt_manager)
                            logger.info("‚úÖ Prompts especializados configurados com sucesso")
                        except ImportError as e:
                            logger.warning(f"‚ö†Ô∏è Falha ao importar prompts especializados: {str(e)}")
                            try:
                                from prompts.simple_loader import simple_prompt_loader
                                update_progress(1, 8, "‚ö†Ô∏è Carregando prompts padr√£o...")
                                self.pipeline.set_prompt_manager(simple_prompt_loader)
                            except ImportError:
                                st.error("‚ùå Nenhum sistema de prompts dispon√≠vel!")
                                return
                    else:
                        st.info("‚ÑπÔ∏è Prompts especializados desabilitados pelo usu√°rio")
                    
                    # Valida√ß√£o cr√≠tica
                    if not hasattr(self.pipeline, 'prompt_manager') or self.pipeline.prompt_manager is None:
                        st.error("‚ùå **ERRO: Pipeline sem prompts! Interrompendo processo.**")
                        return
                    
                    # Se h√° an√°lise pr√©via, carrega os dados e n√£o passa caminho do projeto
                    if self._has_analyzed_project():
                        update_progress(2, 8, "Carregando dados de an√°lise pr√©via...")
                        self.pipeline.set_analysis_data(
                            st.session_state.analysis_results,
                            st.session_state.generated_docs
                        )
                        
                        # Executa o pipeline sem passar o caminho do projeto
                        logger.info("Executando pipeline com dados de an√°lise pr√©via")
                        result_path = self.pipeline.run(
                            delphi_project_path=None,  # N√£o passa caminho para usar an√°lise pr√©via
                            progress_callback=lambda s, t, m: update_progress(s + 3, 8, m)
                        )
                    else:
                        # Valida o arquivo antes de passar para o pipeline
                        if not temp_path or not os.path.exists(temp_path):
                            st.error("‚ùå Arquivo tempor√°rio n√£o encontrado.")
                            return
                        
                        logger.info(f"Executando pipeline com arquivo: {temp_path}")
                        
                        # Executa o pipeline com o arquivo
                        result_path = self.pipeline.run(
                            delphi_project_path=temp_path,
                            progress_callback=lambda s, t, m: update_progress(s + 3, 8, m)
                        )
                    
                    # Sucesso - oferece download
                    progress_bar.progress(1.0)
                    status_text.text("‚úÖ Moderniza√ß√£o conclu√≠da com sucesso!")
                    
                    st.success("üéâ Projeto modernizado com sucesso!")
                    
                    # Mostra estat√≠sticas da moderniza√ß√£o
                    self._show_modernization_stats()
                    
                    # Bot√£o de download
                    with open(result_path, 'rb') as file:
                        st.download_button(
                            label="üì• Baixar Projeto Java Spring",
                            data=file.read(),
                            file_name="modernized_project.zip",
                            mime="application/zip",
                            type="primary",
                            use_container_width=True
                        )
                    
                    # Limpa arquivo tempor√°rio
                    os.unlink(temp_path)
                    os.unlink(result_path)
                    
                except Exception as e:
                    st.error(f"‚ùå Erro durante a moderniza√ß√£o: {str(e)}")
                    status_text.text(f"‚ùå Erro: {str(e)}")
                    
                    # Limpa arquivo tempor√°rio
                    if os.path.exists(temp_path):
                        os.unlink(temp_path)
                    
        except Exception as e:
            st.error(f"‚ùå Erro ao inicializar pipeline: {str(e)}")
    
    def _check_ollama_available(self) -> bool:
        """Verifica se o Ollama est√° dispon√≠vel"""
        try:
            import requests
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def _render_footer(self):
        """Renderiza o rodap√© da aplica√ß√£o"""
        st.divider()
        st.markdown("""
        ---
        **JUNIM v1.0** - Desenvolvido como parte do TCC de Sistemas de Informa√ß√£o  
        *Powered by IA Generativa (Groq/Ollama) + RAG*
        """)

# Adiciona CSS customizado
def add_custom_css():
    """Adiciona estilos CSS customizados"""
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #1f4e79, #2d5aa0);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin-bottom: 1rem;
    }
    
    .status-box {
        background: #f0f2f6;
        border-left: 5px solid #1f4e79;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .success-box {
        background: #d4edda;
        border-left: 5px solid #28a745;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .error-box {
        background: #f8d7da;
        border-left: 5px solid #dc3545;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

