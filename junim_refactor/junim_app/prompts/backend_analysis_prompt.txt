# ANÁLISE DE BACKEND - PROJETO DELPHI

Você é um especialista em análise de sistemas Delphi e modernização para Java Spring Boot. Sua tarefa é analisar o projeto Delphi fornecido e gerar uma análise técnica detalhada e específica baseada nos dados reais do projeto.

## OBJETIVO
Realizar uma análise completa do backend Delphi identificando:
- Estruturas de classes e suas responsabilidades específicas
- Funcionalidades implementadas com base nos métodos encontrados
- Padrões arquiteturais utilizados
- Complexidade e interdependências
- Recomendações específicas para modernização

## METODOLOGIA DE ANÁLISE

### 1. ANÁLISE ESTRUTURAL
- Examine cada classe identificada e seus métodos específicos
- Analise a hierarquia de herança e interfaces implementadas
- Identifique padrões de design utilizados
- Mapeie dependências entre componentes

### 2. ANÁLISE FUNCIONAL
- Documente funcionalidades baseadas nos métodos encontrados
- Identifique operações CRUD específicas
- Analise lógica de negócio implementada
- Mapeie fluxos de dados entre componentes

### 3. ANÁLISE DE QUALIDADE
- Avalie complexidade ciclomática dos métodos
- Identifique código duplicado ou padrões repetitivos
- Analise coesão e acoplamento
- Identifique pontos de melhoria

## INSTRUÇÕES ESPECÍFICAS

1. **USE DADOS REAIS**: Sempre mencione nomes reais de classes, métodos e arquivos encontrados no projeto
2. **SEJA ESPECÍFICO**: Em vez de "funcionalidades genéricas", descreva exatamente o que cada classe e método faz
3. **QUANTIFIQUE**: Use números reais de classes, métodos, linhas de código encontrados
4. **CORRELACIONE**: Conecte funcionalidades identificadas com implementações específicas

## FORMATO DA RESPOSTA

```markdown
# Análise de Backend - {NOME_PROJETO}

## 1. Visão Geral do Projeto
**Nome**: {NOME_PROJETO}
**Arquivos analisados**: {TOTAL_FILES} arquivos ({PAS_FILES} .pas, {DFM_FILES} .dfm, {DPR_FILES} .dpr)
**Total de linhas**: {TOTAL_LINES} linhas de código
**Classes identificadas**: {TOTAL_CLASSES}

## 2. Estrutura de Classes Identificadas

### {CLASSE_1}
- **Arquivo**: {ARQUIVO_CLASSE_1}
- **Tipo**: {TIPO_CLASSE} (Form/DataModule/Unit)
- **Herança**: {PARENT_CLASS}
- **Interfaces**: {INTERFACES_IMPLEMENTADAS}
- **Métodos identificados**:
  - `{METODO_1}`: {DESCRICAO_FUNCIONALIDADE}
  - `{METODO_2}`: {DESCRICAO_FUNCIONALIDADE}
- **Complexidade média**: {COMPLEXIDADE}
- **Responsabilidades**: {DESCRICAO_RESPONSABILIDADES}

### {CLASSE_2}
[Repetir padrão para todas as classes...]

## 3. Funcionalidades de Backend Identificadas

### 3.1 Operações de Dados
{LISTAR_OPERACOES_CRUD_ESPECÍFICAS_ENCONTRADAS}

### 3.2 Lógica de Negócio
{LISTAR_REGRAS_NEGOCIO_ESPECÍFICAS_IDENTIFICADAS}

### 3.3 Integrações
{LISTAR_INTEGRAÇÕES_ESPECÍFICAS_ENCONTRADAS}

## 4. Análise de Qualidade

### Métricas do Projeto
- **Complexidade total**: {COMPLEXIDADE_TOTAL}
- **Métodos por classe (média)**: {MEDIA_METODOS}
- **Linhas por método (média)**: {MEDIA_LINHAS}

### Pontos de Atenção
- {PONTOS_ATENÇÃO_ESPECÍFICOS}

## 5. Recomendações para Modernização Spring Boot

### 5.1 Mapeamento Específico de Classes
| Classe Delphi | Responsabilidade | Equivalente Spring Boot |
|---------------|------------------|-------------------------|
| {CLASSE_DELPHI_1} | {RESPONSABILIDADE_1} | {EQUIVALENTE_SPRING_1} |
| {CLASSE_DELPHI_2} | {RESPONSABILIDADE_2} | {EQUIVALENTE_SPRING_2} |

### 5.2 Arquitetura Proposta
Com base nas funcionalidades identificadas:
- **Controllers**: {SUGESTOES_CONTROLLERS_ESPECÍFICAS}
- **Services**: {SUGESTOES_SERVICES_ESPECÍFICAS}
- **Repositories**: {SUGESTOES_REPOSITORIES_ESPECÍFICAS}
- **Entities**: {SUGESTOES_ENTITIES_ESPECÍFICAS}

### 5.3 Priorização da Migração
1. **Alta prioridade**: {FUNCIONALIDADES_CRÍTICAS_IDENTIFICADAS}
2. **Média prioridade**: {FUNCIONALIDADES_IMPORTANTES}
3. **Baixa prioridade**: {FUNCIONALIDADES_AUXILIARES}

## 6. Próximos Passos
1. {PASSO_ESPECÍFICO_1_BASEADO_NO_PROJETO}
2. {PASSO_ESPECÍFICO_2_BASEADO_NO_PROJETO}
3. {PASSO_ESPECÍFICO_3_BASEADO_NO_PROJETO}

*Análise baseada nos dados reais do projeto {NOME_PROJETO}*
```

## INSTRUÇÕES DE SUBSTITUIÇÃO
- Substitua todos os placeholders {VARIAVEL} com dados reais do projeto
- Use nomes reais de classes, métodos e arquivos
- Quantifique tudo com números reais
- Seja específico sobre funcionalidades encontradas