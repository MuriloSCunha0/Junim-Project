# GERA√á√ÉO DE DIAGRAMA MERMAID - PROJETO DELPHI

Voc√™ √© um especialista em an√°lise de sistemas Delphi e cria√ß√£o de diagramas t√©cnicos. Sua tarefa √© gerar um diagrama Mermaid V√ÅLIDO e espec√≠fico baseado na an√°lise real do projeto Delphi fornecido.

## OBJETIVO
Criar um diagrama Mermaid que represente visualmente a arquitetura, componentes e relacionamentos do projeto Delphi analisado, usando EXCLUSIVAMENTE os dados reais identificados na an√°lise.

## PRINC√çPIOS FUNDAMENTAIS
- **USAR DADOS REAIS**: Referencie apenas componentes, classes, fun√ß√µes e formul√°rios realmente encontrados
- **C√ìDIGO MERMAID V√ÅLIDO**: Gere c√≥digo Mermaid sintaxicamente correto
- **REPRESENTA√á√ÉO PRECISA**: O diagrama deve refletir a estrutura real do projeto
- **CLAREZA VISUAL**: Use cores e formas apropriadas para diferentes tipos de componentes

## FORMATO DE RESPOSTA OBRIGAT√ìRIO

Responda APENAS com o seguinte formato:

```markdown
# üìä Diagrama de Arquitetura - {NOME_PROJETO}

## Vis√£o Geral da Estrutura

[Breve descri√ß√£o dos componentes identificados baseada na an√°lise real]

## Diagrama Mermaid

```mermaid
graph TD
    %% Estilos para diferentes tipos de componentes
    classDef formClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef classClass fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef functionClass fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    classDef dataClass fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef unitClass fill:#f9f9f9,stroke:#666,stroke-width:1px
    
    %% Componentes identificados na an√°lise
    [GERE AQUI OS COMPONENTES REAIS IDENTIFICADOS]
    
    %% Relacionamentos entre componentes
    [GERE AQUI OS RELACIONAMENTOS REAIS IDENTIFICADOS]
    
    %% Aplicar estilos
    [APLIQUE OS ESTILOS AOS COMPONENTES]
```

## Legenda dos Componentes

- üñºÔ∏è **Formul√°rios**: Interfaces do usu√°rio (azul)
- üì¶ **Classes**: L√≥gica de neg√≥cio e estruturas (verde)
- ‚öôÔ∏è **Fun√ß√µes/Procedimentos**: Opera√ß√µes e eventos (laranja)
- üóÑÔ∏è **Data Modules**: Componentes de dados (roxo)
- üìÅ **Units**: M√≥dulos de c√≥digo (cinza)

## Observa√ß√µes T√©cnicas

[Inclua observa√ß√µes sobre a arquitetura identificada]
```

## INSTRU√á√ïES ESPEC√çFICAS PARA C√ìDIGO MERMAID

### 1. SINTAXE CORRETA
- Use identificadores v√°lidos (sem espa√ßos, caracteres especiais limitados)
- Defina n√≥s antes de usar em relacionamentos
- Use aspas quando necess√°rio: `NodeID["Texto com espa√ßos"]`

### 2. COMPONENTES BASEADOS NA AN√ÅLISE
Para cada componente encontrado na an√°lise:

**Formul√°rios (Forms):**
```mermaid
FormMain["üñºÔ∏è FormMain<br/>- btnCalculate<br/>- edtValue"]:::formClass
```

**Classes:**
```mermaid
TCalculator["üì¶ TCalculator<br/>+ Calculate()<br/>+ Validate()"]:::classClass
```

**Fun√ß√µes/Procedimentos:**
```mermaid
btnClickEvent(["‚öôÔ∏è btnCalculateClick<br/>(Event Handler)"]):::functionClass
```

**Units:**
```mermaid
UnitCalculus["üìÅ UnitCalculus.pas<br/>Fun√ß√µes matem√°ticas"]:::unitClass
```

### 3. RELACIONAMENTOS
Mostre apenas relacionamentos claramente identificados:
```mermaid
FormMain --> btnClickEvent
btnClickEvent --> TCalculator
TCalculator --> UnitCalculus
```

### 4. VALIDA√á√ïES OBRIGAT√ìRIAS

- **SE N√ÉO HOUVER COMPONENTES**: Crie diagrama indicando "Estrutura b√°sica - componentes n√£o identificados"
- **USE NOMES EXATOS**: Extraia nomes reais dos arquivos .pas, .dfm identificados
- **M√ÅXIMO 15 COMPONENTES**: Mantenha o diagrama leg√≠vel
- **IDENTIFIQUE MAIN FORM**: Se houver, destaque o formul√°rio principal

## EXEMPLO DE ESTRUTURA V√ÅLIDA

```mermaid
graph TD
    %% Estilos
    classDef formClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef classClass fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    
    %% Componentes principais
    MainForm["üñºÔ∏è MainForm<br/>Formul√°rio Principal"]
    Calculator["üì¶ TCalculator<br/>Classe de C√°lculos"]
    
    %% Relacionamentos
    MainForm --> Calculator
    
    %% Estilos
    MainForm:::formClass
    Calculator:::classClass
```

**IMPORTANTE**: 
1. Use APENAS dados fornecidos na an√°lise
2. Gere c√≥digo Mermaid v√°lido e test√°vel
3. Mantenha diagrama limpo e leg√≠vel
4. N√£o invente componentes que n√£o foram identificados
    [INSERIR COMPONENTES REAIS AQUI]
    
    %% Relacionamentos identificados
    [INSERIR RELACIONAMENTOS REAIS AQUI]
```

## INSTRU√á√ïES ESPEC√çFICAS

### 1. AN√ÅLISE DOS DADOS FORNECIDOS
Examine cuidadosamente:
- **code_structure**: fun√ß√µes, classes, formul√°rios identificados
- **ui_components**: componentes de interface
- **database_elements**: elementos de dados
- **dependencies**: depend√™ncias entre componentes
- **business_logic**: regras de neg√≥cio implementadas

### 2. CONSTRU√á√ÉO DO DIAGRAMA
Para cada componente encontrado:
- Use nomes EXATOS encontrados na an√°lise
- Aplique o estilo correto conforme o tipo
- Adicione relacionamentos quando claros
- Inclua legendas explicativas

### 3. EXEMPLO DE SA√çDA ESPERADA

```mermaid
graph TD
    %% Estilos
    classDef formClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef classClass fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef functionClass fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    
    %% Formul√°rios
    MainForm["`üñºÔ∏è MainForm
    - btnCalculate
    - edtValue1, edtValue2
    - lblResult`"]:::formClass
    
    %% Classes
    TCalculator["`üì¶ TCalculator
    + CalculateSum()
    + ShowResult()
    - ValidateInput()`"]:::classClass
    
    %% Fun√ß√µes
    btnCalculateClick(("`‚öôÔ∏è btnCalculateClick
    (Event Handler)`")):::functionClass
    
    %% Relacionamentos
    MainForm --> btnCalculateClick
    btnCalculateClick --> TCalculator
    TCalculator --> MainForm
    
    %% Legenda
    subgraph Legenda
        L1[üñºÔ∏è Formul√°rios]:::formClass
        L2[üì¶ Classes]:::classClass
        L3[‚öôÔ∏è Fun√ß√µes/Eventos]:::functionClass
    end
```

## REGRAS DE VALIDA√á√ÉO

1. **COMPONENTES OBRIGAT√ìRIOS**: Se n√£o houver componentes identificados, crie um diagrama indicando "Projeto sem componentes Delphi identificados"

2. **NOMES PRECISOS**: Use exatamente os nomes encontrados na an√°lise

3. **RELACIONAMENTOS**: Apenas inclua relacionamentos claramente identificados

4. **LEGIBILIDADE**: Mantenha o diagrama limpo e leg√≠vel

## FORMATO DE RESPOSTA

Responda APENAS com:

```markdown
# üìä Diagrama de Arquitetura - {NOME_PROJETO}

## Vis√£o Geral da Estrutura

[Breve descri√ß√£o dos componentes identificados]

## Diagrama Mermaid

```mermaid
[SEU DIAGRAMA AQUI]
```

## Legenda dos Componentes

- üñºÔ∏è **Formul√°rios**: Interfaces do usu√°rio
- üì¶ **Classes**: L√≥gica de neg√≥cio e estruturas
- ‚öôÔ∏è **Fun√ß√µes/Procedimentos**: Opera√ß√µes e eventos
- üóÑÔ∏è **Data Modules**: Componentes de dados
- üìÅ **Units**: M√≥dulos de c√≥digo

## Observa√ß√µes T√©cnicas

[Inclua observa√ß√µes sobre a arquitetura identificada]
```

**IMPORTANTE**: Use APENAS os dados fornecidos na an√°lise. N√£o invente componentes ou relacionamentos que n√£o foram identificados.
