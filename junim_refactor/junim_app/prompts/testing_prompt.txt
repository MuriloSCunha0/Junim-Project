# Prompt aprimorado para geração de testes automatizados

## OBJETIVO
Criar uma suíte de testes completa e didática, baseada em funcionalidades reais, casos de uso e regras de negócio do sistema convertido.

## INSTRUÇÕES
- Para cada funcionalidade convertida:
  - Explique em linguagem natural o que está sendo testado e por quê.
  - Crie cenários de teste baseados em exemplos de uso reais do sistema (ex: "Usuário cadastra cliente com dados válidos", "Busca entidade inexistente retorna 404").
  - Garanta cobertura de regras de negócio, fluxos alternativos e validações.
  - Comente os testes explicando o objetivo de cada cenário.
  - Utilize nomes de métodos e variáveis claros e autoexplicativos.

## TESTES DE CONTROLLER
```java
@WebMvcTest(EntityController.class)
class EntityControllerTest {
    // ... testes baseados em casos de uso reais, com comentários didáticos
}
```

## TESTES DE SERVICE
```java
@ExtendWith(MockitoExtension.class)
class EntityServiceTest {
    // ... testes de regras de negócio, fluxos de sucesso e erro, com explicações
}
```

## TESTES DE REPOSITORY
```java
@DataJpaTest
class EntityRepositoryTest {
    // ... testes de queries, relacionamentos e integridade dos dados
}
```

## COBERTURA
- Teste todas as operações principais, fluxos alternativos e regras de negócio
- Inclua cenários de erro, validações e integrações
- Comente cada teste para facilitar entendimento e manutenção
        // Given
        CreateEntityDTO dto = new CreateEntityDTO("Test");
        Entity entity = new Entity("Test");
        Entity saved = new Entity(1L, "Test");
        
        when(repository.save(any(Entity.class))).thenReturn(saved);
        
        // When
        EntityDTO result = entityService.create(dto);
        
        // Then
        assertThat(result.getId()).isEqualTo(1L);
        assertThat(result.getName()).isEqualTo("Test");
        verify(repository).save(any(Entity.class));
    }
    
    @Test
    void shouldThrowExceptionWhenBusinessRuleViolated() {
        // Given
        CreateEntityDTO invalidDto = new CreateEntityDTO("");
        
        // When & Then
        assertThrows(BusinessException.class, () -> entityService.create(invalidDto));
    }
}
```

## TESTES DE REPOSITORY
```java
@DataJpaTest
class EntityRepositoryTest {
    
    @Autowired
    private TestEntityManager entityManager;
    
    @Autowired
    private EntityRepository repository;
    
    @Test
    void shouldFindByActiveTrue() {
        // Given
        Entity active = new Entity("Active", true);
        Entity inactive = new Entity("Inactive", false);
        entityManager.persistAndFlush(active);
        entityManager.persistAndFlush(inactive);
        
        // When
        List<Entity> result = repository.findByActiveTrue();
        
        // Then
        assertThat(result).hasSize(1);
        assertThat(result.get(0).getName()).isEqualTo("Active");
    }
}
```

## COBERTURA OBRIGATÓRIA
- ✅ Todos os endpoints REST
- ✅ Lógica de negócio dos serviços  
- ✅ Queries customizadas dos repositories
- ✅ Cenários de erro e exceções
- ✅ Validações de entrada
- ✅ Regras de negócio críticas
